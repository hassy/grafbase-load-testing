config:
  target: http://127.0.0.1:4000
  defaults:
    headers:
      x-api-key: "{{ $env.GRAFBASE_API_KEY }}"
  environments:
    local:
      # Local dev server started with "npx grafbase dev"
      # Useful for writing & debugging the tests themselves
      target: http://127.0.0.1:4000
    prod:
      # This is our production deployment, using the free plan
      target: https://grafbase-load-testing-main-hassy.grafbase.app
      plugins:
        # Provide a breakdown of latency per GraphQL operation
        metrics-by-endpoint: {}
        # Allow us to set GraphQL-specific checks for errors as we
        # can't rely on status codes
        expect:
          outputFormat: prettyError
        # Calculate Apdex score automatically
        apdex: {}
        ensure: {}
      ensure:
        conditions:
          - expression: "vusers.failed < (vusers.created * 0.01)"
            description: "Allow no more than 1% of all VUs to fail"
      phases:
        - duration: 180
          arrivalRate: 10
          name: Gentle warm up phase
        - duration: 180
          arrivalRate: 10
          rampTo: 20
          name: Gentle ramp
        - duration: 120
          arrivalRate: 20
          rampTo: 50
          name: Sudden load spike
# Note: with GraphQL can't rely on HTTP response codes to know whether
# a request succeeded or not, so we're setting a JMESPath check on every
# response in each scenario.
scenarios:
  #
  # Get posts
  #
  - name: get_posts
    # weight: 99
    flow:
      - post:
          url: "/graphql"
          name: Get posts
          expect:
            - jmespath: "data != null"
            - jmespath: "errors == null"
          json:
            query: |
              query {
                postCollection(first: 10) {
                  edges {
                    node {
                      id
                      title
                      url
                      comments(first: 10) {
                        edges {
                          node {
                            id
                            body
                          }
                        }
                      }
                    }
                  }
                }
              }